stages:
  - build
  - deploy

build-backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/services/backend"
      --dockerfile "${CI_PROJECT_DIR}/services/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE_BACKEND}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

build-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/services/frontend"
      --dockerfile "${CI_PROJECT_DIR}/services/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE_FRONTEND}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

build-scraper:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}/services/scraper"
      --dockerfile "${CI_PROJECT_DIR}/services/scraper/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE_SCRAPER}:${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

deploy-backend:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - cd services/backend
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE 
    - kubectl config set clusters.k8s.server $K8S_SERVER
    - kubectl config set users.ci-user.token $K8S_TOKEN
    - kubectl config set-context ci-k8s --cluster=k8s --user=ci-user --namespace=group5
    - kubectl config use-context ci-k8s
    - kubectl apply -f backend.yaml

deploy-frontend:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - cd services/frontend
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE 
    - kubectl config set clusters.k8s.server $K8S_SERVER
    - kubectl config set users.ci-user.token $K8S_TOKEN
    - kubectl config set-context ci-k8s --cluster=k8s --user=ci-user --namespace=group5
    - kubectl config use-context ci-k8s
    - kubectl apply -f frontend.yaml

deploy-scraper:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - cd services/scraper
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE 
    - kubectl config set clusters.k8s.server $K8S_SERVER
    - kubectl config set users.ci-user.token $K8S_TOKEN
    - kubectl config set-context ci-k8s --cluster=k8s --user=ci-user --namespace=group5
    - kubectl config use-context ci-k8s
    - kubectl apply -f scraper.yaml

deploy-ingress:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  script:
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE 
    - kubectl config set clusters.k8s.server $K8S_SERVER
    - kubectl config set users.ci-user.token $K8S_TOKEN
    - kubectl config set-context ci-k8s --cluster=k8s --user=ci-user --namespace=group5
    - kubectl config use-context ci-k8s
    - kubectl apply -f ingress.yaml